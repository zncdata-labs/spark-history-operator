---
apiVersion: v1
kind: Secret
metadata:
  name: minio-admin
type: Opaque
stringData:
  MINIO_ROOT_USER: minioadmin
  MINIO_ROOT_PASSWORD: minioadmin
  MINIO_USER: ($MINIO_USER)
  MINIO_PASSWORD: ($MINIO_PASSWORD)
  MINIO_BUCKET: ($MINIO_BUCKET)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-script
data:
  init.sh: |
    #!/bin/sh
    echo "init minio"
    ## config mc
    mc alias set minio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_USER}
    mc admin info minio

    ## add user
    mc admin user add minio ${MINIO_USER} ${MINIO_PASSWORD}
    mc admin user list minio

    ## add bucket
    mc mb minio/${MINIO_BUCKET}/events
    mc ls minio

    ## set policy
    cat <<EOF > /tmp/policy.json
    {
        "Version": "2012-10-17",
        "Id": "LakeHouseBuckeyPolicy",
        "Statement": [
            {
                "Sid": "Stment01",
                "Effect": "Allow",
                "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListBucketVersions",
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:ListMultipartUploadParts",
                    "s3:AbortMultipartUpload"
                ],
                "Resource": [
                    "arn:aws:s3:::${MINIO_BUCKET}/*",
                    "arn:aws:s3:::${MINIO_BUCKET}"
                ]
            }
        ]
    }
    EOF
    mc admin policy create minio ${MINIO_BUCKET} /tmp/policy.json
    mc admin policy list minio

    ## attach policy
    policy_count=$(mc admin policy entities --user foo minio | wc -l)
    if [ $policy_count -eq 1 ]; then
        mc admin policy attach minio ${MINIO_BUCKET} --user ${MINIO_USER}
    fi
    echo "init minio done"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: quay.io/minio/minio:latest
        command:
        - /bin/bash
        - -c
        args:
        - |
          function delay_init() {
            sleep 5
            exec /init.sh
          }

          delay_init &
          minio server /data --console-address "0.0.0.0:9001" --address "0.0.0.0:9000"
        envFrom:
        - secretRef:
            name: minio-admin
        ports:
        - containerPort: 9000
          name: http
          protocol: TCP
        - containerPort: 9001
          name: console
          protocol: TCP
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        - name: minio-script
          mountPath: /init.sh
          subPath: init.sh
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - |
                set -e
                # check policy count > 1
                policy_count=$(mc admin policy entities --user foo minio | wc -l)
                if [ $policy_count -eq 1 ]; then
                    exit 1
                else
                    exit 0
                fi
      volumes:
      - name: minio-storage
        emptyDir: {}
      - name: minio-script
        configMap:
          name: minio-script
          defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  type: ClusterIP
  ports:
  - port: 9000
    name: http
    targetPort: 9000
  - port: 9001
    name: console
    targetPort: 9001
  selector:
    app: minio
